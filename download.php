<?php
require_once 'includes/config.php';
require_once 'includes/functions.php';
require_once 'includes/auth.php';
require_once 'includes/db.php';

// Require authentication
requireAuth();

$error = '';
$meeting = null;
$minutes = null;

// Get meeting ID and format from query parameters
$meetingId = isset($_GET['id']) ? intval($_GET['id']) : 0;
$format = isset($_GET['format']) ? sanitizeInput($_GET['format']) : 'pdf';

// Verify meeting exists and belongs to current user
if ($meetingId) {
    $meeting = getMeetingById($meetingId, $_SESSION['user_id']);
    
    if (!$meeting) {
        $error = 'Meeting not found or you do not have permission to access it.';
    } else {
        // Get meeting minutes
        $minutes = getMinutesByMeetingId($meetingId);
        
        if (!$minutes) {
            $error = 'Meeting minutes not found. The audio may still be processing.';
        }
    }
} else {
    $error = 'Invalid meeting ID.';
}

// If there's an error, set a flash message and redirect
if ($error) {
    $_SESSION['flash_message'] = $error;
    $_SESSION['flash_type'] = 'danger';
    header("Location: /dashboard.php");
    exit;
}

// Format filename
$filename = preg_replace('/[^a-z0-9]+/', '-', strtolower($meeting['title'])) . '-minutes';
$date = date('Y-m-d', strtotime($meeting['meeting_date']));
$filename = $filename . '-' . $date;

// Handle different download formats
if ($format === 'txt') {
    // Download as text file
    header('Content-Type: text/plain');
    header('Content-Disposition: attachment; filename="' . $filename . '.txt"');
    
    // Build text content
    $content = "MEETING MINUTES\n";
    $content .= "Title: " . $meeting['title'] . "\n";
    $content .= "Date: " . formatDate($meeting['meeting_date']) . "\n";
    $content .= "Time: " . formatTime($meeting['meeting_time']) . "\n";
    $content .= "\n";
    
    if (!empty($minutes['agenda'])) {
        $content .= "AGENDA\n";
        $content .= "======\n";
        $content .= $minutes['agenda'] . "\n\n";
    }
    
    $content .= "DISCUSSION\n";
    $content .= "==========\n";
    $content .= $minutes['content'] . "\n\n";
    
    if (!empty($minutes['decisions'])) {
        $content .= "DECISIONS\n";
        $content .= "=========\n";
        $content .= $minutes['decisions'] . "\n\n";
    }
    
    if (!empty($minutes['action_items'])) {
        $content .= "ACTION ITEMS\n";
        $content .= "============\n";
        $content .= $minutes['action_items'] . "\n\n";
    }
    
    if (!empty($minutes['conclusion'])) {
        $content .= "CONCLUSION\n";
        $content .= "==========\n";
        $content .= $minutes['conclusion'] . "\n\n";
    }
    
    $content .= "Generated by " . APP_NAME . " on " . date('F j, Y');
    
    echo $content;
    exit;
} else {
    // Default: Download as PDF
    // Require the FPDF library
    require('includes/fpdf/fpdf.php');
    
    class PDF extends FPDF {
        // Page header
        function Header() {
            // Logo (if you have one)
            // $this->Image('logo.png', 10, 6, 30);
            // Arial bold 15
            $this->SetFont('Arial', 'B', 15);
            // Move right
            $this->Cell(80);
            // Title
            $this->Cell(30, 10, 'Meeting Minutes', 0, 0, 'C');
            // Line break
            $this->Ln(20);
        }
        
        // Page footer
        function Footer() {
            // Position at 1.5 cm from bottom
            $this->SetY(-15);
            // Arial italic 8
            $this->SetFont('Arial', 'I', 8);
            // Page number
            $this->Cell(0, 10, 'Page ' . $this->PageNo() . '/{nb}', 0, 0, 'C');
            $this->Ln(5);
            $this->Cell(0, 10, 'Generated by ' . APP_NAME . ' on ' . date('F j, Y'), 0, 0, 'C');
        }
        
        // Better line breaking function
        function MultiCellWithBreak($w, $h, $txt, $border=0, $align='J', $fill=false) {
            // Store x position
            $x = $this->GetX();
            
            // Output text with automatic or explicit line breaks
            $this->MultiCell($w, $h, $txt, $border, $align, $fill);
            
            // Reset x position
            $this->SetX($x);
        }
        
        // Section header
        function SectionHeader($title) {
            $this->SetFont('Arial', 'B', 12);
            $this->SetFillColor(200, 220, 255);
            $this->Cell(0, 8, $title, 0, 1, 'L', true);
            $this->Ln(4);
            $this->SetFont('Arial', '', 11);
        }
    }
    
    // Create new PDF instance
    $pdf = new PDF();
    $pdf->AliasNbPages();
    $pdf->AddPage();
    
    // Set up title and meeting info
    $pdf->SetFont('Arial', 'B', 16);
    $pdf->Cell(0, 10, $meeting['title'], 0, 1, 'C');
    $pdf->Ln(5);
    
    $pdf->SetFont('Arial', '', 12);
    $pdf->Cell(0, 8, 'Date: ' . formatDate($meeting['meeting_date']), 0, 1);
    $pdf->Cell(0, 8, 'Time: ' . formatTime($meeting['meeting_time']), 0, 1);
    $pdf->Ln(5);
    
    // Agenda section
    if (!empty($minutes['agenda'])) {
        $pdf->SectionHeader('AGENDA');
        $pdf->MultiCellWithBreak(0, 6, $minutes['agenda']);
        $pdf->Ln(10);
    }
    
    // Discussion section
    $pdf->SectionHeader('DISCUSSION');
    $pdf->MultiCellWithBreak(0, 6, $minutes['content']);
    $pdf->Ln(10);
    
    // Decisions section
    if (!empty($minutes['decisions'])) {
        $pdf->SectionHeader('DECISIONS');
        $pdf->MultiCellWithBreak(0, 6, $minutes['decisions']);
        $pdf->Ln(10);
    }
    
    // Action items section
    if (!empty($minutes['action_items'])) {
        $pdf->SectionHeader('ACTION ITEMS');
        
        // Process each action item as a bullet point
        $actionItems = explode("\n", $minutes['action_items']);
        foreach ($actionItems as $item) {
            if (trim($item)) {
                $pdf->Cell(5, 6, 'â€¢', 0, 0);
                $pdf->MultiCellWithBreak(0, 6, $item);
            }
        }
        $pdf->Ln(10);
    }
    
    // Conclusion section
    if (!empty($minutes['conclusion'])) {
        $pdf->SectionHeader('CONCLUSION');
        $pdf->MultiCellWithBreak(0, 6, $minutes['conclusion']);
    }
    
    // Output PDF
    $pdf->Output('D', $filename . '.pdf');
    exit;
}
?>
